{"version":3,"sources":["components/Header.jsx","components/Capitulo.jsx","db/capitulos.js","components/Redactar.jsx","components/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","id","class","Capitulo","props","titulo","contenido","capitulos","Redactar","useState","escribir","setEscribir","setContenido","textAreaValue","setTextAreaValue","pocosCaracteres","setPocosCaracteres","className","placeholder","rows","maxLength","name","onClick","onChange","event","target","value","length","console","log","alPublicar","Footer","App","historia","setHistoria","map","capitulo","index","key","nuevoCapitulo","capitulosPrevios","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+KAkBeA,EAhBA,WACb,OACE,6BACE,yBAAKC,GAAG,aACR,yBAAKC,MAAM,UACT,0BAAMD,GAAG,gBAAgBC,MAAM,wBAA/B,gBAGA,0BAAMA,MAAM,eAAZ,mECCOC,EATE,SAACC,GACd,OACI,yBAAKH,GAAG,YACJ,4BAAKG,EAAMC,QACX,2BAAID,EAAME,aCAPC,EANG,CAAC,CACfD,UAAW,uBACZ,CACCA,UAAW,oIC0DAE,EA1DE,SAACJ,GAAW,IAAD,EACQK,oBAAS,GADjB,mBACjBC,EADiB,KACPC,EADO,OAEUF,mBAAS,IAFnB,mBAEjBH,EAFiB,KAENM,EAFM,OAGkBH,mBAAS,IAH3B,mBAGjBI,EAHiB,KAGFC,EAHE,OAIsBL,oBAAS,GAJ/B,mBAIjBM,EAJiB,KAIAC,EAJA,KA6BxB,OACI,yBAAKf,GAAG,WAAWgB,UAAU,QAEzB,6BACI,8BACIC,YAAY,gDACZC,KAAMT,EAAW,IAAM,IACvBU,UAAU,MACVH,UAAWF,EAAkB,0BAA4B,eACzDM,KAAK,YACLC,QAAUZ,EAA+B,KAjCzD,WACoCC,GAA/BD,IAiCWa,SA9BhB,SAA6BC,GACzBZ,EAAa,CACTN,UAAWkB,EAAMC,OAAOC,QAE5BZ,EAAiBU,EAAMC,OAAOC,QA2BlBA,MAAOb,IAEVE,GACG,yBAAKE,UAAU,oBAAf,2DAEHP,GACG,4BACAT,GAAG,eACHgB,UAAU,kBACVK,QAjChB,WACQhB,EAAUA,UAAUqB,OAAS,IAC7BC,QAAQC,IAAIvB,GACZF,EAAM0B,WAAWxB,GACjBK,GAAY,GACZG,EAAiB,IACjBE,GAAmB,IAEnBA,GAAmB,KAsBX,eCxCLe,EARA,WACX,OACI,4BAAQ9B,GAAG,UACP,iG,YC4BG+B,MAxBf,WAAgB,IAAD,EAEmBvB,mBAASF,GAF5B,mBAEN0B,EAFM,KAEIC,EAFJ,KAUb,OACE,yBAAKjC,GAAG,MAAMgB,UAAU,aACpB,kBAAC,EAAD,MACCgB,EAASE,KAAI,SAACC,EAAUC,GACvB,OACE,kBAAC,EAAD,CAAUC,IAAKD,EAAOhC,OAAQgC,EAAO/B,UAAW8B,EAAS9B,eAG7D,kBAAC,EAAD,CAAUwB,WAdhB,SAAyBS,GACvBL,GAAY,SAAAM,GACV,OAAON,EAAY,GAAD,mBAAKM,GAAL,CAAuBD,WAavC,kBAAC,EAAD,QChBYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.a05db128.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div>\r\n      <div id=\"navbar-0\"></div>\r\n      <nav class=\"navbar\">\r\n        <span id=\"navbar-titulo\" class=\"navbar-brand mb-0 h1\">\r\n          Cadex (beta)\r\n        </span>\r\n        <span class=\"navbar-text\">\r\n          Escribí historias junto a otra gente (pero por ahora no).\r\n        </span>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Capitulo = (props) => {\r\n    return (\r\n        <div id=\"capitulo\">\r\n            <h6>{props.titulo}</h6>\r\n            <p>{props.contenido}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Capitulo;","const capitulos = [{\r\n    contenido: \"Había una vez...\"\r\n}, {\r\n    contenido: \"... un pequeño pájaro que no podía volar y que estaba todo el tiempo prendido fuego. Un ave fénix bebé, digamos.\"\r\n}];\r\n\r\nexport default capitulos;","import React, { useState } from \"react\";\r\nimport capitulos from \"../db/capitulos\";\r\n\r\nconst Redactar = (props) => {\r\n    const [escribir, setEscribir] = useState(false);\r\n    const [contenido, setContenido] = useState({});\r\n    const [textAreaValue, setTextAreaValue] = useState(\"\");\r\n    const [pocosCaracteres, setPocosCaracteres] = useState(false);\r\n\r\n    function desplegarTextArea() {\r\n        !escribir ? setEscribir(true) : setEscribir(false);\r\n    }\r\n\r\n    function actualizarContenido(event) {\r\n        setContenido({\r\n            contenido: event.target.value\r\n        });\r\n        setTextAreaValue(event.target.value);\r\n    }\r\n    \r\n    function publicar() {\r\n        if (contenido.contenido.length > 49) {            \r\n            console.log(contenido);\r\n            props.alPublicar(contenido);\r\n            setEscribir(false);\r\n            setTextAreaValue(\"\");\r\n            setPocosCaracteres(false);\r\n        } else {\r\n            setPocosCaracteres(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div id=\"redactar\" className=\"form\">\r\n                    \r\n            <div>\r\n                <textarea\r\n                    placeholder=\"Escribí el siguiente capítulo, a ver...\"\r\n                    rows={escribir ? \"4\" : \"1\"}                    \r\n                    maxLength=\"300\"\r\n                    className={pocosCaracteres ? \"form-control is-invalid\" : \"form-control\"}\r\n                    name=\"contenido\"\r\n                    onClick={!escribir ? desplegarTextArea : null}\r\n                    onChange={actualizarContenido}\r\n                    value={textAreaValue}\r\n                ></textarea>\r\n                {pocosCaracteres && (\r\n                    <div className=\"invalid-feedback\">Mínimo 50 caracteres. Dale que vos tenés talento.</div>\r\n                )}\r\n                {escribir && (\r\n                    <button\r\n                    id=\"btn-publicar\"\r\n                    className=\"btn btn-warning\"\r\n                    onClick={publicar}\r\n                    >Publicar</button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Redactar;","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer id=\"footer\">\r\n            <p>Copybottom 2020. Desarrollado para hinchar las pelotas nomás.</p>\r\n        </footer>\r\n    )\r\n};\r\n\r\nexport default Footer;","import React, { useState } from 'react';\nimport Header from \"./components/Header\";\nimport Capitulo from \"./components/Capitulo\";\nimport Redactar from \"./components/Redactar\";\nimport Footer from \"./components/Footer\";\nimport capitulos from \"./db/capitulos\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport './App.css';\n\nfunction App() {\n\n  const [historia, setHistoria] = useState(capitulos);\n\n  function agregarCapitulo(nuevoCapitulo) {\n    setHistoria(capitulosPrevios => {\n      return setHistoria([...capitulosPrevios, nuevoCapitulo]);\n    })\n  }\n\n  return (\n    <div id=\"app\" className=\"container\">\n        <Header />\n        {historia.map((capitulo, index) => {\n          return (\n            <Capitulo key={index} titulo={index} contenido={capitulo.contenido} />\n          );\n        })}\n        <Redactar alPublicar={agregarCapitulo} />\n        <Footer />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}